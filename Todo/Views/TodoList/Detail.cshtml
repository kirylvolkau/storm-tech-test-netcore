@using Todo.Data.Entities
@using Todo.Models.TodoLists
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel
@inject GravatarService GravatarService

@{
    ViewData["Title"] = $"List: {Model.Title}";

    bool SwitchHideCompleted()
    {
        return !Model.HideCompleted;
    }
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-10">

    <ul class="list-group">

        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
        </li>
        
        <li class="list-group-item">
            <div>
                <label for="sorting">Order by:</label>
                <select name="sorting" id="sorting">
                    @{
                        foreach (var option in Enum.GetValues<TodoListSortingOption>())
                        {
                            if (option == Model.SortBy)
                            {
                                <option value="@option" selected>@option</option>
                            }
                            else
                            {
                                <option value="@option">@option</option>
                            }
                        }
                    }
                </select>
            </div>
        </li>
        
        <li class="list-group-item">
            <div>
                <input type="checkbox" value="Hide completed" id="hidecompleted" checked="@Model.HideCompleted"/>
                <label for="hidecompleted">Hide completed</label>
            </div>
        </li>

        @{
            var items = Model.Items.AsEnumerable();
            switch (Model.SortBy)
            {
                case TodoListSortingOption.Rank:
                {
                    items = items.OrderByDescending(i => i.Rank);
                    break;
                }
                case TodoListSortingOption.Importance:
                default:
                {
                    items = items.OrderBy(i => i.Importance);
                    break;
                }
            }
            
            foreach (var item in items)
            {
                if (item.IsDone && Model.HideCompleted)
                {
                    continue;
                }

                string contextualClass;
                switch (item.Importance)
                {
                    case Importance.High:
                        contextualClass = "list-group-item-danger";
                        break;
                    case Importance.Low:
                        contextualClass = "list-group-item-info";
                        break;
                    default:
                        contextualClass = "";
                        break;
                }
                
                <li class="list-group-item @contextualClass">
                    
                    <div class="row">

                        <div class="col-md-8">
                            <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                                @if (item.IsDone)
                                {
                                    <s>@item.Title</s>
                                }
                                else
                                {
                                    <text>@item.Title</text>
                                }
                            </a>
                        </div>

                        <div col-md-4>
                            <small>Rank: @item.Rank</small>
                        </div>

                        <div class="col-md-4 text-right">
                            <small>
                                @{
                                    var gravatarName = await GravatarService.GetProfileNameAsync(item.ResponsibleParty.UserName);
                                }

                                @gravatarName
                                
                                @item.ResponsibleParty.UserName

                                <img src="https://www.gravatar.com/avatar/@GravatarService.GetHash(item.ResponsibleParty.Email)?s=30" alt="gravatar"/>

                            </small>
                        </div>

                    </div>

                </li>
            }
        }
    </ul>
</div>

@section Scripts
{
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            let button = document.getElementById('hidecompleted');
            button.addEventListener('click', function () {
                location.assign("/TodoList/Detail?todoListId=@Model.TodoListId&hideCompleted=@SwitchHideCompleted()&sortBy=@Model.SortBy");
            });
            
            let dropdown = document.getElementById("sorting");
            dropdown.addEventListener('change', function () {
                location.assign(`/TodoList/Detail?todoListId=@Model.TodoListId&hideCompleted=@Model.HideCompleted&sortBy=${dropdown.value}`);
            });
        });
    </script>
}
