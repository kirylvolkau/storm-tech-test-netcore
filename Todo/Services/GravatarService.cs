using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Todo.Cache;

namespace Todo.Services
{
    public class GravatarService
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly GravatarCache _gravatarCache;

        public GravatarService(
            IHttpClientFactory httpClientFactory,
            GravatarCache gravatarCache)
        {
            _httpClientFactory = httpClientFactory;
            _gravatarCache = gravatarCache;
        }

        public async ValueTask<string> GetProfileNameAsync(string emailAddress)
        {
            var hash = GetHash(emailAddress);

            // try getting cached name
            var cachedName = _gravatarCache.GetName(hash);
            if (cachedName is not null)
            {
                return cachedName;
            }

            // creating & configuring http client
            var httpClient = _httpClientFactory.CreateClient();
            httpClient.Timeout = TimeSpan.FromSeconds(15);

            // trying to get name from gravatar
            var requestUrl = $"https://gravatar.com/{hash}.json";
            var response = await httpClient.GetAsync(requestUrl);
            if (!response.IsSuccessStatusCode)
            {
                return null;
            }

            var content = await response.Content.ReadAsStringAsync();
            var profiles = JsonConvert.DeserializeObject<GravatarProfileResponse>(content);
            var gravatarName = profiles.Entry.SingleOrDefault()?.Name.Formatted;

            if (gravatarName is not null)
            {
                _gravatarCache.SetName(hash, gravatarName);
            }

            return gravatarName;
        }

        public static string GetHash(string emailAddress)
        {
            using (var md5 = MD5.Create())
            {
                var inputBytes = Encoding.Default.GetBytes(emailAddress.Trim().ToLowerInvariant());
                var hashBytes = md5.ComputeHash(inputBytes);

                var builder = new StringBuilder();
                foreach (var b in hashBytes)
                {
                    builder.Append(b.ToString("X2"));
                }
                return builder.ToString().ToLowerInvariant();
            }
        }
    }

    // code below is generated by https://json2csharp.com from a sample response
    // sample response: https://en.gravatar.com/205e460b479e2e5b48aec07710c08d50.json 
    // sample request could be found in the docs under this link: https://en.gravatar.com/site/implement/profiles/json/
    public class Entry
    {
        [JsonProperty("hash")]
        public string Hash { get; set; }

        [JsonProperty("requestHash")]
        public string RequestHash { get; set; }

        [JsonProperty("profileUrl")]
        public string ProfileUrl { get; set; }

        [JsonProperty("preferredUsername")]
        public string PreferredUsername { get; set; }

        [JsonProperty("thumbnailUrl")]
        public string ThumbnailUrl { get; set; }

        [JsonProperty("photos")]
        public List<Photo> Photos { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("urls")]
        public List<object> Urls { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }
    }

    public class Photo
    {
        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public class Name
    {
        [JsonProperty("givenName")]
        public string GivenName { get; set; }

        [JsonProperty("familyName")]
        public string FamilyName { get; set; }

        [JsonProperty("formatted")]
        public string Formatted { get; set; }
    }

    public class GravatarProfileResponse
    {
        [JsonProperty("entry")]
        public List<Entry> Entry { get; set; }
    }
}
